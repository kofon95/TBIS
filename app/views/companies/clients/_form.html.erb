<%= form_with(model: [client.company, client], local: true, id: 'main-form',
              data: { 'form-data' => @s3_direct_post.fields, 'url' => @s3_direct_post.url, 'host' => URI.parse(@s3_direct_post.url).host }) do |form| %>
  <div class="conten-card">


<div class="container">

  <div class="app">

    <a href="#" id="start-camera" class="visible">Touch here to start the app.</a>
    <video id="camera-stream"></video>
    <img id="snap">

    <p id="error-message"></p>

    <div class="controls">
      <a href="#" id="delete-photo" title="Delete Photo" class="disabled"><i class="material-icons">delete</i></a>
      <a href="#" id="take-photo" title="Take Photo"><i class="material-icons">camera_alt</i></a>
      <a href="#" id="download-photo" download="selfie.png" title="Save Photo" class="disabled"><i class="material-icons">file_download</i></a>  
    </div>

    <!-- Hidden canvas element. Used for taking snapshot of video. -->
    <canvas></canvas>

  </div>

</div>

    <div class="information-section">
      <div class="block-information">
        <div id="drop_zone" class="add-avatar">
          <div class="icon-add-avatar">
            <input id="client_avatar" type="file" style="display: none;">
            <%=form.hidden_field :avatar, id: 'client_avatar_field', value: client.avatar%>
          </div>
          <%= image_tag s3_image(@client.avatar), class: 'people-avatar' %>
        </div>
        <div class="finput">
          <%= form.label t('.last_name'), class: 'finput-label' %>
          <%= form.text_field :last_name, id: :client_last_name, class: 'finput-input' %>
        </div>
        <div class="finput">
          <%= form.label t('.first_name'), class: 'finput-label' %>
          <%= form.text_field :first_name, id: :client_first_name, class: 'finput-input' %>
        </div>
        <div class="finput">
          <%= form.label t('.patronymic'), class: 'finput-label' %>
          <%= form.text_field :patronymic, id: :client_patronymic, class: 'finput-input' %>
        </div>
      </div>

      <div class="block-information">
        <div class="finput">
          <%= form.label t('.birthday'), class: 'finput-label' %>
          <%= form.date_field :birthday, id: :client_birthday, class: 'finput-input' %>
        </div>
        <div class="finput">
          <%= form.label t('.sex'), class: 'finput-label' %>
          <%= form.select :sex, options_for_sexes, {selected: client.sex}, {class: 'finput-input'} %>
        </div>
        <div class="finput">
          <%= form.label t('.phone_number'), class: 'finput-label' %>
          <%= form.text_field :phone_number, id: :client_phone_number, class: "finput-input" %>
        </div>
      </div>
    </div>
    <%= form.submit class: "btn icon-confirm" %>
  </div>

  <% if client.errors.any? %>
    <div id="error_explanation" class="message">
      <h2><%= pluralize(client.errors.count, "error") %> prohibited this client from being saved:</h2>

      <ul>
      <% client.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
<% end %>

<script>
  if (!FileList.prototype.slice)  // firefox
    FileList.prototype.slice = Array.prototype.slice
  var form = document.getElementById('main-form')
  var data = JSON.parse(form.dataset.formData)
  var clientAvatarField = document.getElementById('client_avatar_field')
  var clientAvatar = $("#client_avatar")
  var result = clientAvatar.withDropZone('#drop_zone', {
    url: form.dataset.url,
    autoUpload: true,
    formData: (index, blob, filename)=> {
      formData = new FormData
      for (var i in data)
          formData.set(i, data[i])
      formData.set('file', blob, filename)
      return formData
    },
    action: {
      name: "image",
      params: {
        preview: true,
      }
    },
    done(filenames) {
      var fn = filenames.map(filename => eval('`' + data.key + '`'))[0];
      clientAvatarField.value = fn
      console.log(fn)
    }
  })
  clientAvatar.on('change', () => clientAvatarField.value = '')
</script>


<script type="text/javascript">
  

    // References to all the element we will need.
    var video = document.querySelector('#camera-stream'),
        image = document.querySelector('#snap'),
        start_camera = document.querySelector('#start-camera'),
        controls = document.querySelector('.controls'),
        take_photo_btn = document.querySelector('#take-photo'),
        delete_photo_btn = document.querySelector('#delete-photo'),
        download_photo_btn = document.querySelector('#download-photo'),
        error_message = document.querySelector('#error-message');


    // The getUserMedia interface is used for handling camera input.
    // Some browsers need a prefix so here we're covering all the options
    navigator.getMedia = ( navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia ||
    navigator.msGetUserMedia);


    if(!navigator.getMedia){
        displayErrorMessage("Your browser doesn't have support for the navigator.getUserMedia interface.");
    }
    else{

        // Request the camera.
        navigator.getUserMedia(
            // Настройки
            {
                video: false, 
                audio:false
            },
            // Колбэк для успешной операции
            function(stream){

                // Создаём объект для видео потока и
                // запускаем его в HTLM элементе video.
                video.src = window.URL.createObjectURL(stream);

                // Воспроизводим видео.
                video.play();

            },
            // Колбэк для не успешной операции
            function(err){

                // Наиболее частые ошибки — PermissionDenied и DevicesNotFound.
                console.error(err);

            }
        );
    }



    // Mobile browsers cannot play video without user input,
    // so here we're using a button to start it manually.
    start_camera.addEventListener("click", function(e){

        e.preventDefault();

        // Start video playback manually.
        video.play();
        showVideo();

    });


    take_photo_btn.addEventListener("click", function(e){

        e.preventDefault();

        var snap = takeSnapshot();

        // Show image. 
        image.setAttribute('src', snap);
        image.classList.add("visible");

        // Enable delete and save buttons
        delete_photo_btn.classList.remove("disabled");
        download_photo_btn.classList.remove("disabled");

        // Set the href attribute of the download button to the snap url.
        download_photo_btn.href = snap;

        // Pause video playback of stream.
        video.pause();

    });


    delete_photo_btn.addEventListener("click", function(e){

        e.preventDefault();

        // Hide image.
        image.setAttribute('src', "");
        image.classList.remove("visible");

        // Disable delete and save buttons
        delete_photo_btn.classList.add("disabled");
        download_photo_btn.classList.add("disabled");

        // Resume playback of stream.
        video.play();

    });


  
    function showVideo(){
        // Display the video stream and the controls.

        hideUI();
        video.classList.add("visible");
        controls.classList.add("visible");
    }


    function takeSnapshot(){
        // Here we're using a trick that involves a hidden canvas element.  

        var hidden_canvas = document.querySelector('canvas'),
            context = hidden_canvas.getContext('2d');

        var width = video.videoWidth,
            height = video.videoHeight;

        if (width && height) {

            // Setup a canvas with the same dimensions as the video.
            hidden_canvas.width = width;
            hidden_canvas.height = height;

            // Make a copy of the current frame in the video on the canvas.
            context.drawImage(video, 0, 0, width, height);

            // Turn the canvas image into a dataURL that can be used as a src for our photo.
            return hidden_canvas.toDataURL('image/png');
        }
    }


    function displayErrorMessage(error_msg, error){
        error = error || "";
        if(error){
            console.error(error);
        }

        error_message.innerText = error_msg;

        hideUI();
        error_message.classList.add("visible");
    }

   
    function hideUI(){
        // Helper function for clearing the app UI.

        controls.classList.remove("visible");
        start_camera.classList.remove("visible");
        video.classList.remove("visible");
        snap.classList.remove("visible");
        error_message.classList.remove("visible");
    }



</script>